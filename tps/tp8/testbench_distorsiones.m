function out = testbench_distorsiones
% TESTBENCH_DISTORSIONES Exercise audio plug-in class
% to check for violations of plug-in constraints and other errors.
%
% OUT = TESTBENCH_DISTORSIONES Return the output data from the
% plug-in. This is useful to verify that plug-in numeric behavior has not
% changed, when you are changing your plug-in in ways that should not
% affect that behavior (eg, refactoring code).
%
% You can test whether your MATLAB plug-in code is ready for code
% generation by creating and running a mex function from this testbench:
%
%   codegen testbench_distorsiones    % Create the mex function
%   testbench_distorsiones_mex        % Run the mex function
%
% You can use this testbench as a template and edit it to meet your
% testing needs. Rename the file to ensure your work is not
% accidentally overwritten and lost by another run of
% validateAudioPlugin.
%
% Automatically generated by validateAudioPlugin 16-Jul-2020 03:42:19

% Set basic test parameters
sampleRates = [44100, 48000, 96000, 192000, 32000];
frameSizes = [ 2.^(1:13) 2.^(2:13)-1 2.^(1:13)+1];
totalFrameSize = sum(frameSizes);

% Create output buffer if requested
if nargout > 0
    nout = 2;
    obuf = zeros(totalFrameSize*numel(sampleRates), nout);
    optr = 1;
end

% Instantiate the plug-in
plugin = distorsiones;

% Test at each sample rate
for sampleRate = sampleRates
    paramState = initParamState(plugin);
    
    % Tell plug-in the current sample rate
    setSampleRate(plugin, sampleRate);
    
    % Plug-in has no reset method to call after setting sample rate
    
    % Create input data: logarithmically swept sine waves, with a
    % different initial phase for each channel
    phaseOffsets = (0:1)/1 * 0.5 * pi;
    ibuf = logchirp(20, 20e3, sampleRate, totalFrameSize, phaseOffsets);
    iptr = 1;
    
    % Process data using different frame sizes
    for i = 1:numel(frameSizes)
        samplesPerFrame = frameSizes(i);
        
        val = fromNormalizedganancia(mod(floor((i-1)./1),3)/2);
        plugin.ganancia = val;
        paramState.ganancia = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''ganancia''');
        
        val = fromNormalizednivel(mod(floor((i-1)./3),3)/2);
        plugin.nivel = val;
        paramState.nivel = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''nivel''');
        
        val = fromNormalizedgerm(mod(floor((i-1)./9),3)/2);
        plugin.germ = val;
        paramState.germ = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''germ''');
        
        val = fromNormalizedtipo(mod(floor((i-1)./27),3)/2);
        plugin.tipo = val;
        paramState.tipo = val;
        checkForTampering(plugin, paramState, sampleRate, ...
            'Setting parameter ''tipo''');
        
        % Get a frame of input data
        in = ibuf(iptr:iptr+samplesPerFrame-1, :);
        iptr = iptr + samplesPerFrame;
        
        % Run the plug-in
        o1 = process(plugin, in(:,1:2));
        
        % Save the output data if requested
        if nargout > 0
            obuf(optr:optr+samplesPerFrame-1, :) = o1;
            optr = optr + samplesPerFrame;
        end
        
        % Verify class and size of outputs
        if ~isa(o1, 'double')
            error('ValidateAudioPlugin:OutputNotDouble', ...
                ['Output 1 is of class %s, ' ...
                'but should have been double.'], ...
                class(o1));
        end
        if size(o1,1) ~= samplesPerFrame
            error('ValidateAudioPlugin:BadOutputFrameSize', ...
                ['Output 1 produced a frame size of %d, ' ...
                'but should have matched the input frame size of %d.'], ...
                size(o1,1), samplesPerFrame);
        end
        if size(o1,2) ~= 2
            error('ValidateAudioPlugin:BadOutputWidth', ...
                ['Width of output 1 was %d, ' ...
                'but should have been 2 (OutputChannels(1)).'], ...
                size(o1,2));
        end
        checkForTampering(plugin, paramState, sampleRate, 'Running plugin');
    end
end

% Return output data if requested
if nargout > 0
    out = obuf;
end
end

function checkForTampering(plugin, paramState, sampleRate, cause)
% Verify parameters were not tampered with
if ~isequal(paramState.ganancia, plugin.ganancia)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''ganancia'' from %g to %g.', ...
        cause, paramState.ganancia, plugin.ganancia);
end
if ~isequal(paramState.nivel, plugin.nivel)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''nivel'' from %g to %g.', ...
        cause, paramState.nivel, plugin.nivel);
end
if ~isequal(paramState.germ, plugin.germ)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''germ'' from %g to %g.', ...
        cause, paramState.germ, plugin.germ);
end
if ~isequal(paramState.tipo, plugin.tipo)
    error('ValidateAudioPlugin:ParamChanged', ...
        '%s changed parameter ''tipo'' from ''%s'' to ''%s'.'', ...
        cause, paramState.tipo, plugin.tipo);
end
% Verify sample rate was not tampered with
if ~isequal(getSampleRate(plugin), sampleRate)
    error('ValidateAudioPlugin:SampleRateChanged', ...
        '%s changed sample rate from %g to %g.', ...
        cause, sampleRate, getSampleRate(plugin));
end
end

function y = logchirp(f0, f1, Fs, nsamples, initialPhase)
% logarithmically swept sine from f0 to f1 over nsamples, at Fs
y = zeros(nsamples,numel(initialPhase));
instPhi = logInstantaneousPhase(f0, f1, Fs, nsamples);
for i = 1:numel(initialPhase)
    y(:,i) = sin(instPhi + initialPhase(i));
end
end

function phi = logInstantaneousPhase(f0, f1, Fs, n)
final = n-1;
t = (0:final)/final;
t1 = final/Fs;
phi = 2*pi * t1/log(f1/f0) * (f0 * (f1/f0).^(t') - f0);
end

function paramState = initParamState(plugin)
paramState.ganancia = plugin.ganancia;
paramState.nivel = plugin.nivel;
paramState.germ = plugin.germ;
paramState.tipo = plugin.tipo;
end

function val = fromNormalizedganancia(normval)
val = 1 + (10-1)*normval;
end

function val = fromNormalizednivel(normval)
val = 0.0001 * (2/0.0001).^normval;
end

function val = fromNormalizedgerm(normval)
val = logical(floor(0.5 + normval));
end

function val = fromNormalizedtipo(normval)
idx = floor( 0.5 + normval * 2);
switch idx
    case 0
        val = 'Diode Clipping';
    case 1
        val = 'Hard Clipping';
    otherwise
        val = 'Soft Clipping';
end
end
